// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package shuffling.shuffling

@SerialVersionUID(0L)
final case class ShuffleRequest(
    datas: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
    fromWorkerID: _root_.scala.Int = 0,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[ShuffleRequest] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      datas.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
      }
      
      {
        val __value = fromWorkerID
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(3, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      datas.foreach { __v =>
        val __m = __v
        _output__.writeString(1, __m)
      };
      {
        val __v = fromWorkerID
        if (__v != 0) {
          _output__.writeInt32(3, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def clearDatas = copy(datas = _root_.scala.Seq.empty)
    def addDatas(__vs: _root_.scala.Predef.String *): ShuffleRequest = addAllDatas(__vs)
    def addAllDatas(__vs: Iterable[_root_.scala.Predef.String]): ShuffleRequest = copy(datas = datas ++ __vs)
    def withDatas(__v: _root_.scala.Seq[_root_.scala.Predef.String]): ShuffleRequest = copy(datas = __v)
    def withFromWorkerID(__v: _root_.scala.Int): ShuffleRequest = copy(fromWorkerID = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => datas
        case 3 => {
          val __t = fromWorkerID
          if (__t != 0) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PRepeated(datas.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
        case 3 => _root_.scalapb.descriptors.PInt(fromWorkerID)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: shuffling.shuffling.ShuffleRequest.type = shuffling.shuffling.ShuffleRequest
    // @@protoc_insertion_point(GeneratedMessage[shuffling.ShuffleRequest])
}

object ShuffleRequest extends scalapb.GeneratedMessageCompanion[shuffling.shuffling.ShuffleRequest] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[shuffling.shuffling.ShuffleRequest] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): shuffling.shuffling.ShuffleRequest = {
    val __datas: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
    var __fromWorkerID: _root_.scala.Int = 0
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __datas += _input__.readStringRequireUtf8()
        case 24 =>
          __fromWorkerID = _input__.readInt32()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    shuffling.shuffling.ShuffleRequest(
        datas = __datas.result(),
        fromWorkerID = __fromWorkerID,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[shuffling.shuffling.ShuffleRequest] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      shuffling.shuffling.ShuffleRequest(
        datas = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty),
        fromWorkerID = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Int]).getOrElse(0)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ShufflingProto.javaDescriptor.getMessageTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ShufflingProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = shuffling.shuffling.ShuffleRequest(
    datas = _root_.scala.Seq.empty,
    fromWorkerID = 0
  )
  implicit class ShuffleRequestLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, shuffling.shuffling.ShuffleRequest]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, shuffling.shuffling.ShuffleRequest](_l) {
    def datas: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.datas)((c_, f_) => c_.copy(datas = f_))
    def fromWorkerID: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.fromWorkerID)((c_, f_) => c_.copy(fromWorkerID = f_))
  }
  final val DATAS_FIELD_NUMBER = 1
  final val FROMWORKERID_FIELD_NUMBER = 3
  def of(
    datas: _root_.scala.Seq[_root_.scala.Predef.String],
    fromWorkerID: _root_.scala.Int
  ): _root_.shuffling.shuffling.ShuffleRequest = _root_.shuffling.shuffling.ShuffleRequest(
    datas,
    fromWorkerID
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[shuffling.ShuffleRequest])
}
